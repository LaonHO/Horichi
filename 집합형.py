#집합(set):집합에 관련된 것들을 쉽게 처리하기 위해 만들어진 자료형이다.
s1 = ([set])
s1 => {1,2,3}

s2 = set("Hello")
s2 => {'e','l','o','H'}

#중복을 허용하지 않는다/순서가 없다.(Unordered)
s1 = set([1,2,3])
l1 = list(s1) #집합을 리스트나 튜플로 변환해야지만 인덱싱가능
l1 => [1,2,3]
l1[0] => 1
t1 = tuple(s1)
t1 => (1,2,3)
t1[0] => 1

s1 = set([1,2,3,4,5,6])
s2 = set([4,5,6,7,8,9])

#교집합
S1 & s2 => {4,5,6} #"&" 기호를 이용하면 교집합을 간단히 구할 수 있다.
s1.intersection(s2) => {4,5,6} # s2.intersection(s1)을 사용해도 결과는 같다.

합집합
s1 | s2 => {1,2,3,4,5,6,7,8,9} #"|" 기호를 이용한 방법이다.
s1.union(s2) => {1,2,3,4,5,5,6,7,8,9} #s2,union(s1)으로 해도 값은 똑같다

#차집합 
s1-s2 => {1,2,3}
s2-s1 => {8,9,7}
s1.difference(s2) => {1,2,3}  #difference 함수를 이용해도 차집합을 구할 수 있다.
s2.difference(s1) => {8,9,7}

#집합 자료형 관련함수

#값1개 추가 (add)
s1 = ser([1,2,3])
s1,add(4)
s1 => {1,2,3,4}

#값 여러 개 추가 (update)
s1 = set([1,2,3])
s1.update([4,5,6])
s1 => {1,2,3,4,5,6}

#특정 값 제거 (remove)
s1 = set([1,2,3])
s1.remove(2)
s1 => {1,3}
